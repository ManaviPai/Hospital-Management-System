{"version":3,"sources":["Components/FamForm.js","App.js","serviceWorker.js","index.js"],"names":["FamForm","state","firstname","lastname","bloodgrp","handleChange","bind","event","target","name","value","type","checked","this","setState","firstName","placeholder","onChange","lastName","gender","Component","App","className","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"+SAuHeA,E,YAnHX,aACC,IAAD,8BACI,+CACKC,MACL,CACIC,UAAY,GACZC,SAAW,GACXC,SAAW,IAEf,EAAKC,aAAe,EAAKA,aAAaC,KAAlB,gBARxB,E,0EAWaC,GACZ,IAAD,EAC0CA,EAAMC,OAArCC,EADX,EACWA,KAAMC,EADjB,EACiBA,MAAOC,EADxB,EACwBA,KAAMC,EAD9B,EAC8BA,QACjB,aAATD,EAAsBE,KAAKC,SAAL,eAAiBL,EAAOG,IAAaC,KAAKC,SAAL,eAAiBL,EAAOC,M,+BAKnF,OACI,8BACI,6CACA,2BAAOC,KAAK,OACLD,MAAQG,KAAKZ,MAAMc,UACnBN,KAAK,YACLO,YAAY,aACZC,SAAYJ,KAAKR,eACxB,6BACA,4CACA,2BAAOM,KAAK,OACLD,MAASG,KAAKZ,MAAMiB,SACpBT,KAAK,WACLO,YAAY,YACZC,SAAWJ,KAAKR,eACvB,6BACA,6BACA,+CACA,+BACI,2BAAOM,KAAM,QACNF,KAAM,WACNC,MAAM,OACNE,QAA+B,SAAtBC,KAAKZ,MAAMkB,OACpBF,SAAUJ,KAAKR,eAL1B,UAQA,+BACI,2BAAOM,KAAM,QACNF,KAAM,WACNC,MAAM,OACNE,QAA+B,SAAtBC,KAAKZ,MAAMkB,OACpBF,SAAUJ,KAAKR,eAL1B,UAQA,+BACI,2BAAOM,KAAM,QACNF,KAAM,WACNC,MAAM,QACNE,QAA+B,UAAtBC,KAAKZ,MAAMkB,OACpBF,SAAUJ,KAAKR,eAL1B,WAQA,+BACI,2BAAOM,KAAM,QACNF,KAAM,WACNC,MAAM,QACNE,QAA+B,UAAtBC,KAAKZ,MAAMkB,OACpBF,SAAUJ,KAAKR,eAL1B,WAQA,+BACI,2BAAOM,KAAM,QACNF,KAAM,WACNC,MAAM,OACNE,QAA+B,SAAtBC,KAAKZ,MAAMkB,OACpBF,SAAUJ,KAAKR,eAL1B,UAQA,+BACI,2BAAOM,KAAM,QACNF,KAAM,WACNC,MAAM,OACNE,QAA+B,SAAtBC,KAAKZ,MAAMkB,OACpBF,SAAUJ,KAAKR,eAL1B,UAQA,+BACI,2BAAOM,KAAM,QACNF,KAAM,WACNC,MAAM,OACNE,QAA+B,SAAtBC,KAAKZ,MAAMkB,OACpBF,SAAUJ,KAAKR,eAL1B,UAQA,+BACI,2BAAOM,KAAM,QACNF,KAAM,WACNC,MAAM,OACNE,QAA+B,SAAtBC,KAAKZ,MAAMkB,OACpBF,SAAUJ,KAAKR,eAL1B,UAQA,6BACA,6BACA,4BAAQM,KAAK,SAASF,KAAO,UAA7B,e,GA1GMW,aCUPC,MARf,WACE,OACE,yBAAKC,UAAU,OACX,kBAAC,EAAD,QCKYC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.7fe2a213.chunk.js","sourcesContent":["import React, {Component} from \"react\"\n\nclass FamForm extends Component \n{\n    constructor()\n    {\n        super()\n        this.state =\n        {\n            firstname : \"\",\n            lastname : \"\",\n            bloodgrp : \"\"\n        }  \n        this.handleChange = this.handleChange.bind(this)\n    }\n\n    handleChange(event)\n    {\n        const {name, value, type, checked} =  event.target\n        type === \"checkbox\" ? this.setState({ [name]: checked }) : this.setState({ [name]: value })\n    }\n\n    render()\n    {\n        return(\n            <form>\n                <label>First Name</label>\n                <input type=\"text\" \n                       value= {this.state.firstName} \n                       name=\"firstName\" \n                       placeholder=\"First Name\" \n                       onChange = {this.handleChange} />\n                <br />\n                <label>Last Name</label>\n                <input type=\"text\" \n                       value = {this.state.lastName} \n                       name=\"lastName\" \n                       placeholder=\"Last Name\" \n                       onChange= {this.handleChange} />\n                <br />\n                <br />\n                <label>Blood Groups</label>\n                <label>\n                    <input type =\"radio\" \n                           name =\"bloodgrp\" \n                           value='apve' \n                           checked={this.state.gender === 'apve'} \n                           onChange={this.handleChange}\n                           /> A +ve\n                </label>\n                <label>\n                    <input type =\"radio\" \n                           name =\"bloodgrp\" \n                           value='anve' \n                           checked={this.state.gender === 'anve'} \n                           onChange={this.handleChange}\n                           /> A -ve\n                </label>\n                <label>\n                    <input type =\"radio\" \n                           name =\"bloodgrp\" \n                           value='abpve' \n                           checked={this.state.gender === 'abpve'} \n                           onChange={this.handleChange}\n                            /> AB +ve\n                </label>\n                <label>\n                    <input type =\"radio\" \n                           name =\"bloodgrp\" \n                           value='abnve' \n                           checked={this.state.gender === 'abnve'} \n                           onChange={this.handleChange}\n                           /> AB -ve\n                </label>\n                <label>\n                    <input type =\"radio\" \n                           name =\"bloodgrp\" \n                           value='bpve' \n                           checked={this.state.gender === 'bpve'} \n                           onChange={this.handleChange}\n                           /> B +ve\n                </label>\n                <label>\n                    <input type =\"radio\" \n                           name =\"bloodgrp\" \n                           value='bnve' \n                           checked={this.state.gender === 'bnve'} \n                           onChange={this.handleChange}\n                           /> B -ve\n                </label>\n                <label>\n                    <input type =\"radio\" \n                           name =\"bloodgrp\" \n                           value='opve' \n                           checked={this.state.gender === 'opve'} \n                           onChange={this.handleChange}\n                           /> O +ve\n                </label>\n                <label>\n                    <input type =\"radio\" \n                           name =\"bloodgrp\" \n                           value='onve' \n                           checked={this.state.gender === 'onve'} \n                           onChange={this.handleChange}\n                           /> O -ve\n                </label>\n                <br />\n                <br />\n                <button type=\"submit\" name = \"submit\">Submit</button>\n\n\n\n            </form>\n        )\n    }\n}\n\n\n\nexport default FamForm\n","import React from 'react';\nimport './App.css';\nimport FamForm from './Components/FamForm';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n        <FamForm />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n\n\n"],"sourceRoot":""}